"use strict";(self.webpackChunksasm_website=self.webpackChunksasm_website||[]).push([[6956],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5907:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c}});var r=n(3117),a=(n(7294),n(3905));const i={title:"Quick Start",id:"quick_start"},o=void 0,s={unversionedId:"Getting Started/quick_start",id:"Getting Started/quick_start",title:"Quick Start",description:"if you haven't already, install Sasm with this : Installation",source:"@site/docs/Getting Started/quick-start.md",sourceDirName:"Getting Started",slug:"/Getting Started/quick_start",permalink:"/sasm-wiki/docs/Getting Started/quick_start",draft:!1,editUrl:"https://github.com/Vinz2008/sasm-wiki/tree/main/docs/docs/Getting Started/quick-start.md",tags:[],version:"current",frontMatter:{title:"Quick Start",id:"quick_start"},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/sasm-wiki/docs/Getting Started/installation"},next:{title:"Add",permalink:"/sasm-wiki/docs/Instructions/add_instruction"}},l={},c=[{value:"Explication of the code",id:"explication-of-the-code",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"if you haven't already, install Sasm with this : ",(0,a.kt)("a",{parentName:"p",href:"installation"},"Installation"),(0,a.kt)("br",{parentName:"p"}),"\n","Create a file with a .sasm extension.\nThen write in it with your favorite editor this hello world example. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'data section\n# message string\n    msg char "Hello world"\n# length message\n    asm len equ $-msg\n\ntext section\n\n# start function\nstart:\n    move edx <= len\n    move ecx <= msg\n# file descriptor\n    move ebx <= 1\n# system call number sys_write\n    move eax <= 4\n    interrupt 0x80\n    move eax <= 1\n    interrupt 0x80\n')),(0,a.kt)("h2",{id:"explication-of-the-code"},"Explication of the code"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"data section")," start the data section where we put out constants.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},'msg char "Hello world"'),' declares a hello world string named "message".',(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"asm len equ $-msg"),' put the length of the message in a variable named "len" (the ',(0,a.kt)("inlineCode",{parentName:"p"},"asm")," keyword just insert a normal assembly line, ",(0,a.kt)("inlineCode",{parentName:"p"},"equ")," is just for assigning variable, ",(0,a.kt)("inlineCode",{parentName:"p"},"$-"),' select the length of the "msg" variable)',(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"start:")," start the main function.\n",(0,a.kt)("inlineCode",{parentName:"p"},"move edx <= len")," put the length of the message in the edx register.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"move ecx <= msg")," put the message in the ecx register.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"move ebx <= 1")," put 1 in the ebx register that mean to write to stdout.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"move eax <= 4")," put 4 in the eax register that select the sys_write syscall.",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"interrupt 0x80")," do an interrupt to the OS kernel (for Linux and other Unix-like OS, you need to do an interrupt 0x80, but I don't know what it would be for Windows and MacOS)"))}u.isMDXComponent=!0}}]);